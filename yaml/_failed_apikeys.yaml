apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: apikey-lua-filter
spec:
  workloadLabels:
    app: ingressgateway
  filters:
  - listenerMatch:
      portNumber: 80
      listenerType: GATEWAY
    filterName: envoy.lua
    filterType: HTTP
    filterConfig:
      inlineCode: |
        -- Called on the request path.
        function envoy_on_request(request_handle)
            request_handle:logInfo("RONP: PROCESSING LUA")
            request_handle:headers():replace("foo", "bar")
        end

        function xenvoy_on_request(request_handle)
            request_handle:logInfo("Processing request via lua..")

            -- If there's no api key, skip this.
            if request_handle.headers().get("z-api-key") == nil then
                do return end
            end

            -- Build a request for our authenticaiton service before passing request upstream
            local auth_host = "api-key-server:8000"
            local key = request_handle.headers().get("z-api-key")
            local path = "/accessToken?key=" .. key .. "&request_url=https://unused.zenoss.io"

            local cluster = "istio-test"
            local request_headers = {
                [":method"] = "GET",
                [":path"] = {{ path }},
                [":authority"] = {{ auth_host }},
            }
            local request_body = ""
            local timeout = 10000
            
            local response_headers, response_body = request_handle:httpCall(
                cluster,
                request_headers,
                request_body,
                timeout
            )

            -- If the response isn't 200, reject the request
            if tonumber(response_headers[":status"]) ~= 200 then
                request_handle:logInfo("Key Authentication Failed")
                request_handle:respond(
                                {[":status"] = response_headers[":status"]},
                                response_body
                        )
                do return end
            end

            -- The api-key-server responds with json
            -- {"data":"<token>"} or {"error":"<error>"}
            local json = require "json"
            local response = json.decode(response_body)
            if response["error"] != null {
                request_handle:logInfo("Key Exchange Failed")
                request_handle:respond(
                                {[":status"] = 429},
                                response_body
                        )
                do return end
            }

            local value = response["data"]
            request_handle:headers():replace("authorization", "Bearer " .. value)

            request_handle:logInfo("Lua request processed")
        end

        -- Called on the response path.
        function envoy_on_response(response_handle)
            local headers = response_handle:headers()
            headers:add("foos", "ballz")
        end
